from fastapi import APIRouter, Form, HTTPException, Request
from fastapi.responses import JSONResponse, HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from models.mySql import create_connection, close_connection  # MySQL 연결을 위한 함수
from models.getKiwoom import HttpClientModel
from typing import List
from pydantic import BaseModel
import requests
import time


# 주식 테이블블 관련 기능 컨트롤러
router = APIRouter()

@router.get("/api/receive_data")
async def receive_data(request: Request):
    try:
        data = await request.json()
        print("수신된 데이터:", data)
        return {"status": "success", "message": "데이터가 성공적으로 수신되었습니다.", "received_count": len(data)}
    except Exception as e:
        return {"status": "error", "message": f"오류 발생: {str(e)}"}



stock_data = [
    {"종목명": "삼성전자", "현재가": "70,000원", "거래량": "850,000주", "예측(다음날)": "+1,200 (1.74%)"},
    {"종목명": "SK하이닉스", "현재가": "120,000원", "거래량": "720,000주", "예측(다음날)": "+3,000 (2.56%)"},
    {"종목명": "NAVER", "현재가": "198,000원", "거래량": "530,000주", "예측(다음날)": "+4,000 (2.06%)"},
    {"종목명": "현대자동차", "현재가": "180,000원", "거래량": "610,000주", "예측(다음날)": "+2,000 (1.12%)"},
    {"종목명": "카카오", "현재가": "56,000원", "거래량": "480,000주", "예측(다음날)": "-500 (-0.89%)"},
    {"종목명": "LG화학", "현재가": "540,000원", "거래량": "320,000주", "예측(다음날)": "+6,000 (1.12%)"},
    {"종목명": "POSCO홀딩스", "현재가": "407,000원", "거래량": "290,000주", "예측(다음날)": "-2,500 (-0.61%)"},
    {"종목명": "삼성바이오로직스", "현재가": "810,000원", "거래량": "150,000주", "예측(다음날)": "+5,000 (0.62%)"},
    {"종목명": "SK이노베이션", "현재가": "160,000원", "거래량": "210,000주", "예측(다음날)": "+3,000 (1.89%)"},
    {"종목명": "셀트리온", "현재가": "180,000원", "거래량": "340,000주", "예측(다음날)": "-1,000 (-0.55%)"},
    {"종목명": "삼성SDI", "현재가": "630,000원", "거래량": "190,000주", "예측(다음날)": "-5,000 (-0.79%)"},
    {"종목명": "현대모비스", "현재가": "220,000원", "거래량": "270,000주", "예측(다음날)": "+2,200 (1.00%)"},
    {"종목명": "기아", "현재가": "78,500원", "거래량": "430,000주", "예측(다음날)": "+1,100 (1.42%)"},
    {"종목명": "LG전자", "현재가": "120,000원", "거래량": "250,000주", "예측(다음날)": "-2,000 (-1.66%)"},
    {"종목명": "카카오뱅크", "현재가": "33,000원", "거래량": "520,000주", "예측(다음날)": "+500 (1.54%)"},
    {"종목명": "두산에너빌리티", "현재가": "18,500원", "거래량": "580,000주", "예측(다음날)": "+200 (1.08%)"},
    {"종목명": "한화솔루션", "현재가": "48,000원", "거래량": "430,000주", "예측(다음날)": "+600 (1.25%)"},
    {"종목명": "한국전력", "현재가": "22,000원", "거래량": "770,000주", "예측(다음날)": "-300 (-1.36%)"},
    {"종목명": "HMM", "현재가": "17,500원", "거래량": "920,000주", "예측(다음날)": "-100 (-0.57%)"},
    {"종목명": "CJ대한통운", "현재가": "120,000원", "거래량": "310,000주", "예측(다음날)": "+1,500 (1.25%)"}
]


@router.get("/stocks")
def get_stocks():
    """
    FastAPI 엔드포인트: 주식 데이터를 JSON 형태로 반환
    """
    return JSONResponse(content={"status": "success", "data": stock_data})


trade_data = [
    {"날짜" : "2025.01.15", "종목명":"삼성전자","평가손익":"+720,00원(1.1%)","거래대금":"65,160,000원","거래량":"1200주","구분":"매도"},
    {"날짜" : "2025.01.15", "종목명":"LG에너지솔루션","평가손익":"+5,000,000원(0.1%)","거래대금":"3,520,000,000원","거래량":"10000주","구분":"매도"}
]

@router.get("/trade")
async def trade(request: Request):
    """
    거래 내역 데이터 전달
    """
    return JSONResponse(content={"status": "success", "data": trade_data})



mystocks = [
    {"종목명":"삼성전자","현재가":"65,000원","평가손익":"+ 500,000원","매입단가":"60,000원","보유수량":"100주"},
    {"종목명":"LG에너지솔루션","현재가":"390,000원","평가손익":"- 500,000원","매입단가":"400,000원","보유수량":"50주"}
]

@router.get("/mystocks")
async def get_stocks(request: Request):
    """
    보유 종목 데이터 전달
    """
    return JSONResponse(content={"status": "success", "data": mystocks})